{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "44ff77a9",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-06-29T15:10:05.093289Z",
     "iopub.status.busy": "2024-06-29T15:10:05.092860Z",
     "iopub.status.idle": "2024-06-29T15:10:06.020632Z",
     "shell.execute_reply": "2024-06-29T15:10:06.019456Z"
    },
    "papermill": {
     "duration": 0.942357,
     "end_time": "2024-06-29T15:10:06.023404",
     "exception": false,
     "start_time": "2024-06-29T15:10:05.081047",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/churn-modelling/Churn_Modelling.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "815931bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-29T15:10:06.045779Z",
     "iopub.status.busy": "2024-06-29T15:10:06.044575Z",
     "iopub.status.idle": "2024-06-29T15:10:06.120044Z",
     "shell.execute_reply": "2024-06-29T15:10:06.118675Z"
    },
    "papermill": {
     "duration": 0.089295,
     "end_time": "2024-06-29T15:10:06.122699",
     "exception": false,
     "start_time": "2024-06-29T15:10:06.033404",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RowNumber</th>\n",
       "      <th>CustomerId</th>\n",
       "      <th>Surname</th>\n",
       "      <th>CreditScore</th>\n",
       "      <th>Geography</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Tenure</th>\n",
       "      <th>Balance</th>\n",
       "      <th>NumOfProducts</th>\n",
       "      <th>HasCrCard</th>\n",
       "      <th>IsActiveMember</th>\n",
       "      <th>EstimatedSalary</th>\n",
       "      <th>Exited</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>15634602</td>\n",
       "      <td>Hargrave</td>\n",
       "      <td>619</td>\n",
       "      <td>France</td>\n",
       "      <td>Female</td>\n",
       "      <td>42</td>\n",
       "      <td>2</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>101348.88</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>15647311</td>\n",
       "      <td>Hill</td>\n",
       "      <td>608</td>\n",
       "      <td>Spain</td>\n",
       "      <td>Female</td>\n",
       "      <td>41</td>\n",
       "      <td>1</td>\n",
       "      <td>83807.86</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>112542.58</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>15619304</td>\n",
       "      <td>Onio</td>\n",
       "      <td>502</td>\n",
       "      <td>France</td>\n",
       "      <td>Female</td>\n",
       "      <td>42</td>\n",
       "      <td>8</td>\n",
       "      <td>159660.80</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113931.57</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>15701354</td>\n",
       "      <td>Boni</td>\n",
       "      <td>699</td>\n",
       "      <td>France</td>\n",
       "      <td>Female</td>\n",
       "      <td>39</td>\n",
       "      <td>1</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>93826.63</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>15737888</td>\n",
       "      <td>Mitchell</td>\n",
       "      <td>850</td>\n",
       "      <td>Spain</td>\n",
       "      <td>Female</td>\n",
       "      <td>43</td>\n",
       "      <td>2</td>\n",
       "      <td>125510.82</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>79084.10</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   RowNumber  CustomerId   Surname  CreditScore Geography  Gender  Age  \\\n",
       "0          1    15634602  Hargrave          619    France  Female   42   \n",
       "1          2    15647311      Hill          608     Spain  Female   41   \n",
       "2          3    15619304      Onio          502    France  Female   42   \n",
       "3          4    15701354      Boni          699    France  Female   39   \n",
       "4          5    15737888  Mitchell          850     Spain  Female   43   \n",
       "\n",
       "   Tenure    Balance  NumOfProducts  HasCrCard  IsActiveMember  \\\n",
       "0       2       0.00              1          1               1   \n",
       "1       1   83807.86              1          0               1   \n",
       "2       8  159660.80              3          1               0   \n",
       "3       1       0.00              2          0               0   \n",
       "4       2  125510.82              1          1               1   \n",
       "\n",
       "   EstimatedSalary  Exited  \n",
       "0        101348.88       1  \n",
       "1        112542.58       0  \n",
       "2        113931.57       1  \n",
       "3         93826.63       0  \n",
       "4         79084.10       0  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"/kaggle/input/churn-modelling/Churn_Modelling.csv\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c3f8184c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-29T15:10:06.144738Z",
     "iopub.status.busy": "2024-06-29T15:10:06.144306Z",
     "iopub.status.idle": "2024-06-29T15:10:06.172320Z",
     "shell.execute_reply": "2024-06-29T15:10:06.171189Z"
    },
    "papermill": {
     "duration": 0.041922,
     "end_time": "2024-06-29T15:10:06.174865",
     "exception": false,
     "start_time": "2024-06-29T15:10:06.132943",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 10000 entries, 0 to 9999\n",
      "Data columns (total 14 columns):\n",
      " #   Column           Non-Null Count  Dtype  \n",
      "---  ------           --------------  -----  \n",
      " 0   RowNumber        10000 non-null  int64  \n",
      " 1   CustomerId       10000 non-null  int64  \n",
      " 2   Surname          10000 non-null  object \n",
      " 3   CreditScore      10000 non-null  int64  \n",
      " 4   Geography        10000 non-null  object \n",
      " 5   Gender           10000 non-null  object \n",
      " 6   Age              10000 non-null  int64  \n",
      " 7   Tenure           10000 non-null  int64  \n",
      " 8   Balance          10000 non-null  float64\n",
      " 9   NumOfProducts    10000 non-null  int64  \n",
      " 10  HasCrCard        10000 non-null  int64  \n",
      " 11  IsActiveMember   10000 non-null  int64  \n",
      " 12  EstimatedSalary  10000 non-null  float64\n",
      " 13  Exited           10000 non-null  int64  \n",
      "dtypes: float64(2), int64(9), object(3)\n",
      "memory usage: 1.1+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3192696a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-29T15:10:06.196804Z",
     "iopub.status.busy": "2024-06-29T15:10:06.196409Z",
     "iopub.status.idle": "2024-06-29T15:10:06.211871Z",
     "shell.execute_reply": "2024-06-29T15:10:06.210632Z"
    },
    "papermill": {
     "duration": 0.029088,
     "end_time": "2024-06-29T15:10:06.214226",
     "exception": false,
     "start_time": "2024-06-29T15:10:06.185138",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5a4a9587",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-29T15:10:06.237732Z",
     "iopub.status.busy": "2024-06-29T15:10:06.236726Z",
     "iopub.status.idle": "2024-06-29T15:10:06.247201Z",
     "shell.execute_reply": "2024-06-29T15:10:06.246074Z"
    },
    "papermill": {
     "duration": 0.024845,
     "end_time": "2024-06-29T15:10:06.249422",
     "exception": false,
     "start_time": "2024-06-29T15:10:06.224577",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Exited\n",
       "0    7963\n",
       "1    2037\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Exited'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "100d1e21",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-29T15:10:06.272467Z",
     "iopub.status.busy": "2024-06-29T15:10:06.271498Z",
     "iopub.status.idle": "2024-06-29T15:10:06.280658Z",
     "shell.execute_reply": "2024-06-29T15:10:06.279596Z"
    },
    "papermill": {
     "duration": 0.023,
     "end_time": "2024-06-29T15:10:06.282949",
     "exception": false,
     "start_time": "2024-06-29T15:10:06.259949",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Geography\n",
       "France     5014\n",
       "Germany    2509\n",
       "Spain      2477\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Geography'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "19488219",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-29T15:10:06.306412Z",
     "iopub.status.busy": "2024-06-29T15:10:06.305444Z",
     "iopub.status.idle": "2024-06-29T15:10:06.314171Z",
     "shell.execute_reply": "2024-06-29T15:10:06.313127Z"
    },
    "papermill": {
     "duration": 0.022775,
     "end_time": "2024-06-29T15:10:06.316474",
     "exception": false,
     "start_time": "2024-06-29T15:10:06.293699",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Gender\n",
       "Male      5457\n",
       "Female    4543\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Gender'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "90563def",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-29T15:10:06.339473Z",
     "iopub.status.busy": "2024-06-29T15:10:06.339064Z",
     "iopub.status.idle": "2024-06-29T15:10:06.360974Z",
     "shell.execute_reply": "2024-06-29T15:10:06.359847Z"
    },
    "papermill": {
     "duration": 0.036274,
     "end_time": "2024-06-29T15:10:06.363367",
     "exception": false,
     "start_time": "2024-06-29T15:10:06.327093",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CreditScore</th>\n",
       "      <th>Geography</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Tenure</th>\n",
       "      <th>Balance</th>\n",
       "      <th>NumOfProducts</th>\n",
       "      <th>HasCrCard</th>\n",
       "      <th>IsActiveMember</th>\n",
       "      <th>EstimatedSalary</th>\n",
       "      <th>Exited</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>619</td>\n",
       "      <td>France</td>\n",
       "      <td>Female</td>\n",
       "      <td>42</td>\n",
       "      <td>2</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>101348.88</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>608</td>\n",
       "      <td>Spain</td>\n",
       "      <td>Female</td>\n",
       "      <td>41</td>\n",
       "      <td>1</td>\n",
       "      <td>83807.86</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>112542.58</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>502</td>\n",
       "      <td>France</td>\n",
       "      <td>Female</td>\n",
       "      <td>42</td>\n",
       "      <td>8</td>\n",
       "      <td>159660.80</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113931.57</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>699</td>\n",
       "      <td>France</td>\n",
       "      <td>Female</td>\n",
       "      <td>39</td>\n",
       "      <td>1</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>93826.63</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>850</td>\n",
       "      <td>Spain</td>\n",
       "      <td>Female</td>\n",
       "      <td>43</td>\n",
       "      <td>2</td>\n",
       "      <td>125510.82</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>79084.10</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   CreditScore Geography  Gender  Age  Tenure    Balance  NumOfProducts  \\\n",
       "0          619    France  Female   42       2       0.00              1   \n",
       "1          608     Spain  Female   41       1   83807.86              1   \n",
       "2          502    France  Female   42       8  159660.80              3   \n",
       "3          699    France  Female   39       1       0.00              2   \n",
       "4          850     Spain  Female   43       2  125510.82              1   \n",
       "\n",
       "   HasCrCard  IsActiveMember  EstimatedSalary  Exited  \n",
       "0          1               1        101348.88       1  \n",
       "1          0               1        112542.58       0  \n",
       "2          1               0        113931.57       1  \n",
       "3          0               0         93826.63       0  \n",
       "4          1               1         79084.10       0  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.drop(columns=['RowNumber','CustomerId','Surname'],inplace=True)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "782a8783",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-29T15:10:06.386793Z",
     "iopub.status.busy": "2024-06-29T15:10:06.386387Z",
     "iopub.status.idle": "2024-06-29T15:10:06.398129Z",
     "shell.execute_reply": "2024-06-29T15:10:06.397044Z"
    },
    "papermill": {
     "duration": 0.026354,
     "end_time": "2024-06-29T15:10:06.400551",
     "exception": false,
     "start_time": "2024-06-29T15:10:06.374197",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df =pd.get_dummies(df,columns=['Geography','Gender'],drop_first=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d0d4a1ee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-29T15:10:06.424707Z",
     "iopub.status.busy": "2024-06-29T15:10:06.423750Z",
     "iopub.status.idle": "2024-06-29T15:10:06.439483Z",
     "shell.execute_reply": "2024-06-29T15:10:06.438356Z"
    },
    "papermill": {
     "duration": 0.030492,
     "end_time": "2024-06-29T15:10:06.441935",
     "exception": false,
     "start_time": "2024-06-29T15:10:06.411443",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CreditScore</th>\n",
       "      <th>Age</th>\n",
       "      <th>Tenure</th>\n",
       "      <th>Balance</th>\n",
       "      <th>NumOfProducts</th>\n",
       "      <th>HasCrCard</th>\n",
       "      <th>IsActiveMember</th>\n",
       "      <th>EstimatedSalary</th>\n",
       "      <th>Exited</th>\n",
       "      <th>Geography_Germany</th>\n",
       "      <th>Geography_Spain</th>\n",
       "      <th>Gender_Male</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>619</td>\n",
       "      <td>42</td>\n",
       "      <td>2</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>101348.88</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>608</td>\n",
       "      <td>41</td>\n",
       "      <td>1</td>\n",
       "      <td>83807.86</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>112542.58</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>502</td>\n",
       "      <td>42</td>\n",
       "      <td>8</td>\n",
       "      <td>159660.80</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113931.57</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>699</td>\n",
       "      <td>39</td>\n",
       "      <td>1</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>93826.63</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>850</td>\n",
       "      <td>43</td>\n",
       "      <td>2</td>\n",
       "      <td>125510.82</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>79084.10</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   CreditScore  Age  Tenure    Balance  NumOfProducts  HasCrCard  \\\n",
       "0          619   42       2       0.00              1          1   \n",
       "1          608   41       1   83807.86              1          0   \n",
       "2          502   42       8  159660.80              3          1   \n",
       "3          699   39       1       0.00              2          0   \n",
       "4          850   43       2  125510.82              1          1   \n",
       "\n",
       "   IsActiveMember  EstimatedSalary  Exited  Geography_Germany  \\\n",
       "0               1        101348.88       1              False   \n",
       "1               1        112542.58       0              False   \n",
       "2               0        113931.57       1              False   \n",
       "3               0         93826.63       0              False   \n",
       "4               1         79084.10       0              False   \n",
       "\n",
       "   Geography_Spain  Gender_Male  \n",
       "0            False        False  \n",
       "1             True        False  \n",
       "2            False        False  \n",
       "3            False        False  \n",
       "4             True        False  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a4564d90",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-29T15:10:06.466735Z",
     "iopub.status.busy": "2024-06-29T15:10:06.466353Z",
     "iopub.status.idle": "2024-06-29T15:10:07.802079Z",
     "shell.execute_reply": "2024-06-29T15:10:07.800986Z"
    },
    "papermill": {
     "duration": 1.351441,
     "end_time": "2024-06-29T15:10:07.804532",
     "exception": false,
     "start_time": "2024-06-29T15:10:06.453091",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train,X_test,y_train,y_test=train_test_split(df.drop(columns=['Exited']),df['Exited'],test_size=0.2,random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "57af0ff4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-29T15:10:07.828224Z",
     "iopub.status.busy": "2024-06-29T15:10:07.827848Z",
     "iopub.status.idle": "2024-06-29T15:10:07.834594Z",
     "shell.execute_reply": "2024-06-29T15:10:07.833493Z"
    },
    "papermill": {
     "duration": 0.020985,
     "end_time": "2024-06-29T15:10:07.836616",
     "exception": false,
     "start_time": "2024-06-29T15:10:07.815631",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8000, 11)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "77fe1f67",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-29T15:10:07.860549Z",
     "iopub.status.busy": "2024-06-29T15:10:07.860148Z",
     "iopub.status.idle": "2024-06-29T15:10:07.880018Z",
     "shell.execute_reply": "2024-06-29T15:10:07.878840Z"
    },
    "papermill": {
     "duration": 0.034762,
     "end_time": "2024-06-29T15:10:07.882610",
     "exception": false,
     "start_time": "2024-06-29T15:10:07.847848",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "scaler = StandardScaler()\n",
    "\n",
    "X_train_scaled=scaler.fit_transform(X_train)\n",
    "X_test_scaled=scaler.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d237dc83",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-29T15:10:07.906836Z",
     "iopub.status.busy": "2024-06-29T15:10:07.906406Z",
     "iopub.status.idle": "2024-06-29T15:10:07.914387Z",
     "shell.execute_reply": "2024-06-29T15:10:07.913329Z"
    },
    "papermill": {
     "duration": 0.022575,
     "end_time": "2024-06-29T15:10:07.916657",
     "exception": false,
     "start_time": "2024-06-29T15:10:07.894082",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.35649971, -0.6557859 ,  0.34567966, ..., -0.57946723,\n",
       "        -0.57638802,  0.91324755],\n",
       "       [-0.20389777,  0.29493847, -0.3483691 , ...,  1.72572313,\n",
       "        -0.57638802,  0.91324755],\n",
       "       [-0.96147213, -1.41636539, -0.69539349, ..., -0.57946723,\n",
       "         1.73494238,  0.91324755],\n",
       "       ...,\n",
       "       [ 0.86500853, -0.08535128, -1.38944225, ..., -0.57946723,\n",
       "        -0.57638802, -1.09499335],\n",
       "       [ 0.15932282,  0.3900109 ,  1.03972843, ..., -0.57946723,\n",
       "        -0.57638802,  0.91324755],\n",
       "       [ 0.47065475,  1.15059039, -1.38944225, ...,  1.72572313,\n",
       "        -0.57638802,  0.91324755]])"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_scaled"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "3324bdd2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-29T15:10:07.941516Z",
     "iopub.status.busy": "2024-06-29T15:10:07.941109Z",
     "iopub.status.idle": "2024-06-29T15:10:21.656203Z",
     "shell.execute_reply": "2024-06-29T15:10:21.654800Z"
    },
    "papermill": {
     "duration": 13.730315,
     "end_time": "2024-06-29T15:10:21.658928",
     "exception": false,
     "start_time": "2024-06-29T15:10:07.928613",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-06-29 15:10:10.135807: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-06-29 15:10:10.135949: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-06-29 15:10:10.298018: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "import tensorflow\n",
    "from tensorflow import keras \n",
    "from tensorflow.keras import Sequential\n",
    "from tensorflow.keras.layers import Dense"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "15af7865",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-29T15:10:21.686478Z",
     "iopub.status.busy": "2024-06-29T15:10:21.685832Z",
     "iopub.status.idle": "2024-06-29T15:10:21.779262Z",
     "shell.execute_reply": "2024-06-29T15:10:21.778192Z"
    },
    "papermill": {
     "duration": 0.110642,
     "end_time": "2024-06-29T15:10:21.781551",
     "exception": false,
     "start_time": "2024-06-29T15:10:21.670909",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "model.add(Dense(3,activation='sigmoid',input_dim=11))\n",
    "model.add(Dense(1,activation='sigmoid'))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "afde001d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-29T15:10:21.806417Z",
     "iopub.status.busy": "2024-06-29T15:10:21.805578Z",
     "iopub.status.idle": "2024-06-29T15:10:21.825772Z",
     "shell.execute_reply": "2024-06-29T15:10:21.824641Z"
    },
    "papermill": {
     "duration": 0.035371,
     "end_time": "2024-06-29T15:10:21.828230",
     "exception": false,
     "start_time": "2024-06-29T15:10:21.792859",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"sequential\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)              │            <span style=\"color: #00af00; text-decoration-color: #00af00\">36</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)              │             <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m3\u001b[0m)              │            \u001b[38;5;34m36\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)              │             \u001b[38;5;34m4\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">40</span> (160.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m40\u001b[0m (160.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">40</span> (160.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m40\u001b[0m (160.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "7f873a79",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-29T15:10:21.855194Z",
     "iopub.status.busy": "2024-06-29T15:10:21.854752Z",
     "iopub.status.idle": "2024-06-29T15:10:21.871172Z",
     "shell.execute_reply": "2024-06-29T15:10:21.869846Z"
    },
    "papermill": {
     "duration": 0.032728,
     "end_time": "2024-06-29T15:10:21.873841",
     "exception": false,
     "start_time": "2024-06-29T15:10:21.841113",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model.compile(loss='binary_crossentropy',optimizer='Adam')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "731a583e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-29T15:10:21.900211Z",
     "iopub.status.busy": "2024-06-29T15:10:21.899754Z",
     "iopub.status.idle": "2024-06-29T15:10:25.962189Z",
     "shell.execute_reply": "2024-06-29T15:10:25.961117Z"
    },
    "papermill": {
     "duration": 4.078339,
     "end_time": "2024-06-29T15:10:25.964509",
     "exception": false,
     "start_time": "2024-06-29T15:10:21.886170",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step - loss: 0.6097\n",
      "Epoch 2/10\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.4881\n",
      "Epoch 3/10\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.4562\n",
      "Epoch 4/10\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.4429\n",
      "Epoch 5/10\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.4393\n",
      "Epoch 6/10\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.4385\n",
      "Epoch 7/10\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.4264\n",
      "Epoch 8/10\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.4250\n",
      "Epoch 9/10\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.4261\n",
      "Epoch 10/10\n",
      "\u001b[1m250/250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - loss: 0.4293\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.src.callbacks.history.History at 0x7e5fe05f7a00>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(X_train_scaled,y_train,epochs=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "06e2efa9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-29T15:10:26.001679Z",
     "iopub.status.busy": "2024-06-29T15:10:26.001284Z",
     "iopub.status.idle": "2024-06-29T15:10:26.012979Z",
     "shell.execute_reply": "2024-06-29T15:10:26.011727Z"
    },
    "papermill": {
     "duration": 0.033275,
     "end_time": "2024-06-29T15:10:26.015327",
     "exception": false,
     "start_time": "2024-06-29T15:10:25.982052",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[array([[-0.01088068, -0.2770709 ,  0.05161134],\n",
       "        [-0.6391515 ,  1.6824757 , -1.536317  ],\n",
       "        [ 0.02082141, -0.3510318 , -0.21374764],\n",
       "        [-0.40165982, -0.01640388, -0.07243305],\n",
       "        [-0.08929978,  0.02882645,  0.50594646],\n",
       "        [-0.14638226,  0.1482765 ,  0.38560712],\n",
       "        [ 0.9017603 , -0.00284469,  0.5228737 ],\n",
       "        [ 0.03808071, -0.0116839 , -0.1237477 ],\n",
       "        [-0.6414588 ,  0.3360067 , -0.10208479],\n",
       "        [-0.14509402, -0.04546135,  0.15622005],\n",
       "        [ 0.29396114, -0.49964428,  0.27846527]], dtype=float32),\n",
       " array([ 0.5006317 , -0.28596166,  0.5033313 ], dtype=float32)]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.layers[0].get_weights()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "2de369eb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-29T15:10:26.053271Z",
     "iopub.status.busy": "2024-06-29T15:10:26.052820Z",
     "iopub.status.idle": "2024-06-29T15:10:26.063772Z",
     "shell.execute_reply": "2024-06-29T15:10:26.062545Z"
    },
    "papermill": {
     "duration": 0.032947,
     "end_time": "2024-06-29T15:10:26.066211",
     "exception": false,
     "start_time": "2024-06-29T15:10:26.033264",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[array([[-1.7924975],\n",
       "        [ 1.0371282],\n",
       "        [-1.0370532]], dtype=float32),\n",
       " array([-0.3769338], dtype=float32)]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.layers[1].get_weights()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "8f51475e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-29T15:10:26.103347Z",
     "iopub.status.busy": "2024-06-29T15:10:26.102937Z",
     "iopub.status.idle": "2024-06-29T15:10:26.338510Z",
     "shell.execute_reply": "2024-06-29T15:10:26.337187Z"
    },
    "papermill": {
     "duration": 0.257566,
     "end_time": "2024-06-29T15:10:26.341281",
     "exception": false,
     "start_time": "2024-06-29T15:10:26.083715",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step\n"
     ]
    }
   ],
   "source": [
    "y_log = model.predict(X_test_scaled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "d2b6c1a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-29T15:10:26.379889Z",
     "iopub.status.busy": "2024-06-29T15:10:26.379469Z",
     "iopub.status.idle": "2024-06-29T15:10:26.384907Z",
     "shell.execute_reply": "2024-06-29T15:10:26.383855Z"
    },
    "papermill": {
     "duration": 0.028126,
     "end_time": "2024-06-29T15:10:26.387340",
     "exception": false,
     "start_time": "2024-06-29T15:10:26.359214",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_pred = np.where(y_log>0.5,1,0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "4666240d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-29T15:10:26.484645Z",
     "iopub.status.busy": "2024-06-29T15:10:26.484263Z",
     "iopub.status.idle": "2024-06-29T15:10:26.489378Z",
     "shell.execute_reply": "2024-06-29T15:10:26.488275Z"
    },
    "papermill": {
     "duration": 0.027145,
     "end_time": "2024-06-29T15:10:26.491738",
     "exception": false,
     "start_time": "2024-06-29T15:10:26.464593",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.metrics import accuracy_score\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "4b00f070",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-29T15:10:26.530601Z",
     "iopub.status.busy": "2024-06-29T15:10:26.530227Z",
     "iopub.status.idle": "2024-06-29T15:10:26.540041Z",
     "shell.execute_reply": "2024-06-29T15:10:26.538848Z"
    },
    "papermill": {
     "duration": 0.031811,
     "end_time": "2024-06-29T15:10:26.542386",
     "exception": false,
     "start_time": "2024-06-29T15:10:26.510575",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8155"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy_score(y_test,y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "6b0b2433",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-29T15:10:26.581640Z",
     "iopub.status.busy": "2024-06-29T15:10:26.581250Z",
     "iopub.status.idle": "2024-06-29T15:10:26.586599Z",
     "shell.execute_reply": "2024-06-29T15:10:26.585206Z"
    },
    "papermill": {
     "duration": 0.027901,
     "end_time": "2024-06-29T15:10:26.589329",
     "exception": false,
     "start_time": "2024-06-29T15:10:26.561428",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#We can increase the number of epoch for better output.\n",
    "#We can change the activation function to relu for better output.\n",
    "#We can increase the number of nodes in the hidden layer.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "b7b816d0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-29T15:10:26.627674Z",
     "iopub.status.busy": "2024-06-29T15:10:26.627243Z",
     "iopub.status.idle": "2024-06-29T15:10:26.633198Z",
     "shell.execute_reply": "2024-06-29T15:10:26.632095Z"
    },
    "papermill": {
     "duration": 0.02811,
     "end_time": "2024-06-29T15:10:26.635546",
     "exception": false,
     "start_time": "2024-06-29T15:10:26.607436",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model2 = Sequential()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "994a73ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-29T15:10:26.673859Z",
     "iopub.status.busy": "2024-06-29T15:10:26.673415Z",
     "iopub.status.idle": "2024-06-29T15:10:26.716884Z",
     "shell.execute_reply": "2024-06-29T15:10:26.715588Z"
    },
    "papermill": {
     "duration": 0.065518,
     "end_time": "2024-06-29T15:10:26.719224",
     "exception": false,
     "start_time": "2024-06-29T15:10:26.653706",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
     ]
    }
   ],
   "source": [
    "model2.add(Dense(11,activation='relu',input_dim=11))\n",
    "model2.add(Dense(11,activation='relu'))\n",
    "model2.add(Dense(1,activation='sigmoid'))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "d8488c78",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-29T15:10:26.758745Z",
     "iopub.status.busy": "2024-06-29T15:10:26.758337Z",
     "iopub.status.idle": "2024-06-29T15:10:26.778492Z",
     "shell.execute_reply": "2024-06-29T15:10:26.777466Z"
    },
    "papermill": {
     "duration": 0.042396,
     "end_time": "2024-06-29T15:10:26.780713",
     "exception": false,
     "start_time": "2024-06-29T15:10:26.738317",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_1\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"sequential_1\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">11</span>)             │           <span style=\"color: #00af00; text-decoration-color: #00af00\">132</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">11</span>)             │           <span style=\"color: #00af00; text-decoration-color: #00af00\">132</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)              │            <span style=\"color: #00af00; text-decoration-color: #00af00\">12</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m11\u001b[0m)             │           \u001b[38;5;34m132\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_3 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m11\u001b[0m)             │           \u001b[38;5;34m132\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_4 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)              │            \u001b[38;5;34m12\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">276</span> (1.08 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m276\u001b[0m (1.08 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">276</span> (1.08 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m276\u001b[0m (1.08 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model2.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "65a297cf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-29T15:10:26.821550Z",
     "iopub.status.busy": "2024-06-29T15:10:26.820811Z",
     "iopub.status.idle": "2024-06-29T15:10:26.831900Z",
     "shell.execute_reply": "2024-06-29T15:10:26.830809Z"
    },
    "papermill": {
     "duration": 0.034802,
     "end_time": "2024-06-29T15:10:26.834335",
     "exception": false,
     "start_time": "2024-06-29T15:10:26.799533",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model2.compile(loss='binary_crossentropy',optimizer='Adam',metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "376382a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-29T15:10:26.873976Z",
     "iopub.status.busy": "2024-06-29T15:10:26.873543Z",
     "iopub.status.idle": "2024-06-29T15:11:04.604555Z",
     "shell.execute_reply": "2024-06-29T15:11:04.603373Z"
    },
    "papermill": {
     "duration": 37.754129,
     "end_time": "2024-06-29T15:11:04.607436",
     "exception": false,
     "start_time": "2024-06-29T15:10:26.853307",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 2ms/step - accuracy: 0.7243 - loss: 0.6109 - val_accuracy: 0.7987 - val_loss: 0.4909\n",
      "Epoch 2/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7889 - loss: 0.4906 - val_accuracy: 0.8169 - val_loss: 0.4404\n",
      "Epoch 3/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8122 - loss: 0.4369 - val_accuracy: 0.8219 - val_loss: 0.4205\n",
      "Epoch 4/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8082 - loss: 0.4364 - val_accuracy: 0.8281 - val_loss: 0.4080\n",
      "Epoch 5/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8321 - loss: 0.4027 - val_accuracy: 0.8381 - val_loss: 0.3970\n",
      "Epoch 6/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8348 - loss: 0.3894 - val_accuracy: 0.8400 - val_loss: 0.3875\n",
      "Epoch 7/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8445 - loss: 0.3809 - val_accuracy: 0.8481 - val_loss: 0.3767\n",
      "Epoch 8/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8553 - loss: 0.3597 - val_accuracy: 0.8525 - val_loss: 0.3690\n",
      "Epoch 9/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8553 - loss: 0.3524 - val_accuracy: 0.8544 - val_loss: 0.3633\n",
      "Epoch 10/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8526 - loss: 0.3706 - val_accuracy: 0.8537 - val_loss: 0.3596\n",
      "Epoch 11/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8613 - loss: 0.3525 - val_accuracy: 0.8544 - val_loss: 0.3569\n",
      "Epoch 12/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8613 - loss: 0.3446 - val_accuracy: 0.8556 - val_loss: 0.3537\n",
      "Epoch 13/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8645 - loss: 0.3393 - val_accuracy: 0.8569 - val_loss: 0.3518\n",
      "Epoch 14/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8697 - loss: 0.3300 - val_accuracy: 0.8575 - val_loss: 0.3522\n",
      "Epoch 15/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8636 - loss: 0.3279 - val_accuracy: 0.8594 - val_loss: 0.3500\n",
      "Epoch 16/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8572 - loss: 0.3402 - val_accuracy: 0.8569 - val_loss: 0.3486\n",
      "Epoch 17/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8721 - loss: 0.3232 - val_accuracy: 0.8594 - val_loss: 0.3485\n",
      "Epoch 18/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8605 - loss: 0.3438 - val_accuracy: 0.8619 - val_loss: 0.3477\n",
      "Epoch 19/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8550 - loss: 0.3421 - val_accuracy: 0.8587 - val_loss: 0.3521\n",
      "Epoch 20/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8646 - loss: 0.3368 - val_accuracy: 0.8606 - val_loss: 0.3464\n",
      "Epoch 21/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8630 - loss: 0.3352 - val_accuracy: 0.8581 - val_loss: 0.3450\n",
      "Epoch 22/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8664 - loss: 0.3369 - val_accuracy: 0.8581 - val_loss: 0.3450\n",
      "Epoch 23/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8533 - loss: 0.3455 - val_accuracy: 0.8556 - val_loss: 0.3445\n",
      "Epoch 24/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8543 - loss: 0.3461 - val_accuracy: 0.8569 - val_loss: 0.3439\n",
      "Epoch 25/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8637 - loss: 0.3315 - val_accuracy: 0.8575 - val_loss: 0.3432\n",
      "Epoch 26/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8593 - loss: 0.3434 - val_accuracy: 0.8575 - val_loss: 0.3443\n",
      "Epoch 27/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8622 - loss: 0.3405 - val_accuracy: 0.8606 - val_loss: 0.3459\n",
      "Epoch 28/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8696 - loss: 0.3218 - val_accuracy: 0.8594 - val_loss: 0.3419\n",
      "Epoch 29/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8612 - loss: 0.3306 - val_accuracy: 0.8550 - val_loss: 0.3420\n",
      "Epoch 30/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8658 - loss: 0.3420 - val_accuracy: 0.8581 - val_loss: 0.3423\n",
      "Epoch 31/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8623 - loss: 0.3313 - val_accuracy: 0.8562 - val_loss: 0.3431\n",
      "Epoch 32/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8727 - loss: 0.3176 - val_accuracy: 0.8537 - val_loss: 0.3419\n",
      "Epoch 33/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8621 - loss: 0.3234 - val_accuracy: 0.8562 - val_loss: 0.3419\n",
      "Epoch 34/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8690 - loss: 0.3222 - val_accuracy: 0.8544 - val_loss: 0.3425\n",
      "Epoch 35/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8638 - loss: 0.3228 - val_accuracy: 0.8600 - val_loss: 0.3406\n",
      "Epoch 36/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8621 - loss: 0.3331 - val_accuracy: 0.8569 - val_loss: 0.3412\n",
      "Epoch 37/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8614 - loss: 0.3254 - val_accuracy: 0.8556 - val_loss: 0.3408\n",
      "Epoch 38/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8630 - loss: 0.3237 - val_accuracy: 0.8556 - val_loss: 0.3412\n",
      "Epoch 39/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8702 - loss: 0.3212 - val_accuracy: 0.8581 - val_loss: 0.3416\n",
      "Epoch 40/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8651 - loss: 0.3343 - val_accuracy: 0.8544 - val_loss: 0.3411\n",
      "Epoch 41/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8676 - loss: 0.3223 - val_accuracy: 0.8587 - val_loss: 0.3407\n",
      "Epoch 42/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8613 - loss: 0.3305 - val_accuracy: 0.8531 - val_loss: 0.3410\n",
      "Epoch 43/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8648 - loss: 0.3209 - val_accuracy: 0.8556 - val_loss: 0.3417\n",
      "Epoch 44/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8703 - loss: 0.3212 - val_accuracy: 0.8569 - val_loss: 0.3408\n",
      "Epoch 45/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8608 - loss: 0.3346 - val_accuracy: 0.8550 - val_loss: 0.3410\n",
      "Epoch 46/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8693 - loss: 0.3169 - val_accuracy: 0.8562 - val_loss: 0.3423\n",
      "Epoch 47/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8637 - loss: 0.3252 - val_accuracy: 0.8537 - val_loss: 0.3433\n",
      "Epoch 48/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8670 - loss: 0.3231 - val_accuracy: 0.8537 - val_loss: 0.3414\n",
      "Epoch 49/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8646 - loss: 0.3243 - val_accuracy: 0.8544 - val_loss: 0.3414\n",
      "Epoch 50/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8736 - loss: 0.3178 - val_accuracy: 0.8562 - val_loss: 0.3420\n",
      "Epoch 51/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8627 - loss: 0.3308 - val_accuracy: 0.8569 - val_loss: 0.3413\n",
      "Epoch 52/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8661 - loss: 0.3195 - val_accuracy: 0.8531 - val_loss: 0.3430\n",
      "Epoch 53/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8710 - loss: 0.3211 - val_accuracy: 0.8525 - val_loss: 0.3439\n",
      "Epoch 54/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8713 - loss: 0.3217 - val_accuracy: 0.8531 - val_loss: 0.3426\n",
      "Epoch 55/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8560 - loss: 0.3351 - val_accuracy: 0.8525 - val_loss: 0.3427\n",
      "Epoch 56/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8620 - loss: 0.3300 - val_accuracy: 0.8519 - val_loss: 0.3426\n",
      "Epoch 57/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8678 - loss: 0.3189 - val_accuracy: 0.8556 - val_loss: 0.3419\n",
      "Epoch 58/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8610 - loss: 0.3376 - val_accuracy: 0.8531 - val_loss: 0.3425\n",
      "Epoch 59/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8691 - loss: 0.3149 - val_accuracy: 0.8537 - val_loss: 0.3421\n",
      "Epoch 60/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8599 - loss: 0.3317 - val_accuracy: 0.8556 - val_loss: 0.3425\n",
      "Epoch 61/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8689 - loss: 0.3199 - val_accuracy: 0.8550 - val_loss: 0.3446\n",
      "Epoch 62/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8664 - loss: 0.3278 - val_accuracy: 0.8537 - val_loss: 0.3426\n",
      "Epoch 63/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8723 - loss: 0.3127 - val_accuracy: 0.8525 - val_loss: 0.3426\n",
      "Epoch 64/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8682 - loss: 0.3207 - val_accuracy: 0.8537 - val_loss: 0.3417\n",
      "Epoch 65/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8715 - loss: 0.3111 - val_accuracy: 0.8512 - val_loss: 0.3437\n",
      "Epoch 66/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8717 - loss: 0.3171 - val_accuracy: 0.8537 - val_loss: 0.3429\n",
      "Epoch 67/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8787 - loss: 0.3075 - val_accuracy: 0.8519 - val_loss: 0.3428\n",
      "Epoch 68/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8658 - loss: 0.3268 - val_accuracy: 0.8519 - val_loss: 0.3441\n",
      "Epoch 69/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8683 - loss: 0.3204 - val_accuracy: 0.8537 - val_loss: 0.3427\n",
      "Epoch 70/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8670 - loss: 0.3206 - val_accuracy: 0.8562 - val_loss: 0.3440\n",
      "Epoch 71/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8708 - loss: 0.3251 - val_accuracy: 0.8531 - val_loss: 0.3443\n",
      "Epoch 72/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8710 - loss: 0.3130 - val_accuracy: 0.8519 - val_loss: 0.3443\n",
      "Epoch 73/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8702 - loss: 0.3238 - val_accuracy: 0.8537 - val_loss: 0.3443\n",
      "Epoch 74/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8667 - loss: 0.3158 - val_accuracy: 0.8544 - val_loss: 0.3432\n",
      "Epoch 75/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8708 - loss: 0.3150 - val_accuracy: 0.8531 - val_loss: 0.3461\n",
      "Epoch 76/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8691 - loss: 0.3208 - val_accuracy: 0.8512 - val_loss: 0.3434\n",
      "Epoch 77/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8761 - loss: 0.3143 - val_accuracy: 0.8512 - val_loss: 0.3454\n",
      "Epoch 78/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8702 - loss: 0.3135 - val_accuracy: 0.8512 - val_loss: 0.3445\n",
      "Epoch 79/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8773 - loss: 0.3067 - val_accuracy: 0.8512 - val_loss: 0.3439\n",
      "Epoch 80/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8681 - loss: 0.3183 - val_accuracy: 0.8506 - val_loss: 0.3449\n",
      "Epoch 81/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8732 - loss: 0.3150 - val_accuracy: 0.8525 - val_loss: 0.3446\n",
      "Epoch 82/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8748 - loss: 0.3059 - val_accuracy: 0.8537 - val_loss: 0.3453\n",
      "Epoch 83/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8788 - loss: 0.3098 - val_accuracy: 0.8525 - val_loss: 0.3449\n",
      "Epoch 84/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8686 - loss: 0.3218 - val_accuracy: 0.8512 - val_loss: 0.3448\n",
      "Epoch 85/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8737 - loss: 0.3096 - val_accuracy: 0.8487 - val_loss: 0.3450\n",
      "Epoch 86/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8737 - loss: 0.3127 - val_accuracy: 0.8519 - val_loss: 0.3450\n",
      "Epoch 87/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8679 - loss: 0.3211 - val_accuracy: 0.8512 - val_loss: 0.3449\n",
      "Epoch 88/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8724 - loss: 0.3124 - val_accuracy: 0.8531 - val_loss: 0.3448\n",
      "Epoch 89/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8672 - loss: 0.3185 - val_accuracy: 0.8550 - val_loss: 0.3453\n",
      "Epoch 90/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8721 - loss: 0.3118 - val_accuracy: 0.8512 - val_loss: 0.3454\n",
      "Epoch 91/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8738 - loss: 0.3139 - val_accuracy: 0.8531 - val_loss: 0.3456\n",
      "Epoch 92/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8636 - loss: 0.3281 - val_accuracy: 0.8544 - val_loss: 0.3458\n",
      "Epoch 93/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8732 - loss: 0.3060 - val_accuracy: 0.8525 - val_loss: 0.3454\n",
      "Epoch 94/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8677 - loss: 0.3163 - val_accuracy: 0.8525 - val_loss: 0.3471\n",
      "Epoch 95/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8723 - loss: 0.3126 - val_accuracy: 0.8512 - val_loss: 0.3454\n",
      "Epoch 96/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8714 - loss: 0.3190 - val_accuracy: 0.8519 - val_loss: 0.3456\n",
      "Epoch 97/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8730 - loss: 0.3089 - val_accuracy: 0.8500 - val_loss: 0.3463\n",
      "Epoch 98/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8744 - loss: 0.3095 - val_accuracy: 0.8506 - val_loss: 0.3456\n",
      "Epoch 99/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8719 - loss: 0.3081 - val_accuracy: 0.8531 - val_loss: 0.3461\n",
      "Epoch 100/100\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8747 - loss: 0.3032 - val_accuracy: 0.8519 - val_loss: 0.3471\n"
     ]
    }
   ],
   "source": [
    "history = model2.fit(X_train_scaled,y_train,epochs=100,validation_split=0.2)\n",
    "#Our training as well as validation accuracy should increase.\n",
    "#It is overfitting if training accuracy increases but validation accuracy decreases."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "e38cd5f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-29T15:11:04.745099Z",
     "iopub.status.busy": "2024-06-29T15:11:04.744666Z",
     "iopub.status.idle": "2024-06-29T15:11:04.755858Z",
     "shell.execute_reply": "2024-06-29T15:11:04.754619Z"
    },
    "papermill": {
     "duration": 0.082975,
     "end_time": "2024-06-29T15:11:04.758335",
     "exception": false,
     "start_time": "2024-06-29T15:11:04.675360",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[array([[ 0.37989387, -0.02685675,  0.06068989,  0.19389771, -0.15593545,\n",
       "          0.08510867,  0.18650222, -0.05529888, -0.01224134,  0.49728414,\n",
       "          0.17536907],\n",
       "        [-0.14583519,  1.1642255 ,  0.5389266 , -0.70233226, -0.37362042,\n",
       "          0.7494076 , -0.31697112, -0.00584464,  0.49713644, -0.25659406,\n",
       "         -0.4821579 ],\n",
       "        [-0.16027205, -0.24733214,  0.04295067, -0.3115537 , -0.1492559 ,\n",
       "          0.02814235,  0.14612739,  0.01146849,  0.14732823,  0.07151138,\n",
       "          0.1051285 ],\n",
       "        [-1.461833  ,  0.05972579, -0.8160166 ,  0.13164105,  0.11711288,\n",
       "         -0.06821431, -0.48170504,  0.2013304 , -0.21621059, -0.5749086 ,\n",
       "          0.3372076 ],\n",
       "        [-0.43740985,  0.00462381, -0.7278642 , -0.41437337, -0.39027718,\n",
       "         -0.23900877,  0.19302897,  1.0034341 , -0.96931046, -0.50031763,\n",
       "          0.7332916 ],\n",
       "        [ 0.04719784,  0.06424963,  0.09385154,  0.37022835,  0.07472117,\n",
       "          0.1429107 , -0.01355172, -0.02933785,  0.00823092, -0.01181317,\n",
       "          0.04204524],\n",
       "        [-0.04455465,  0.08099084, -0.26777864, -0.5886905 , -0.14813071,\n",
       "          0.916053  , -0.16840637, -0.2018737 , -0.12504126, -0.5096672 ,\n",
       "         -0.02998789],\n",
       "        [ 0.05855499, -0.21660252, -0.3251673 , -0.26244885,  0.03448278,\n",
       "          0.03960262,  0.02267539,  0.07865138,  0.16766684, -0.7229024 ,\n",
       "         -0.07920212],\n",
       "        [ 0.02070137,  0.02909853, -0.7314399 , -0.6674873 ,  0.30956468,\n",
       "          0.49699503, -0.9796622 , -0.06876396,  0.18735425,  0.46734074,\n",
       "         -0.1317297 ],\n",
       "        [ 0.08893972,  0.03437448, -0.13100113,  0.26130003, -1.1836894 ,\n",
       "         -0.17760976,  0.20650293, -0.06911457, -0.09707596, -0.21618845,\n",
       "         -0.05201381],\n",
       "        [ 0.03879381, -0.07795049, -0.2570497 , -0.08455434, -0.43127322,\n",
       "         -0.02795844, -0.25913808, -0.3050211 , -0.2105348 ,  0.49838445,\n",
       "          1.071924  ]], dtype=float32),\n",
       " array([ 0.30611336, -0.155098  ,  0.21810775, -0.19399057,  0.543897  ,\n",
       "        -0.14345713,  0.71091425, -0.47484714,  0.22643021,  0.17157646,\n",
       "         0.48149723], dtype=float32)]"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model2.layers[0].get_weights()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "4c587e15",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-29T15:11:04.900173Z",
     "iopub.status.busy": "2024-06-29T15:11:04.899138Z",
     "iopub.status.idle": "2024-06-29T15:11:04.909932Z",
     "shell.execute_reply": "2024-06-29T15:11:04.908598Z"
    },
    "papermill": {
     "duration": 0.084637,
     "end_time": "2024-06-29T15:11:04.912123",
     "exception": false,
     "start_time": "2024-06-29T15:11:04.827486",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[array([[-0.5590978 , -0.48631555,  0.4850401 , -1.0596772 , -0.21104932,\n",
       "          0.39491838, -0.5434958 , -1.0217508 , -0.48719057,  0.07954572,\n",
       "          0.24921754],\n",
       "        [-0.27372947,  0.2620028 , -0.30164465,  0.2861086 , -0.48893544,\n",
       "          0.27375618,  0.25510275,  0.3362095 ,  0.29022017,  0.64424783,\n",
       "         -0.6101359 ],\n",
       "        [ 0.29430753,  0.04449378, -0.3865561 , -1.8439881 ,  0.27423832,\n",
       "          0.40366086,  0.01770419, -0.30192268, -0.46645927, -0.08447037,\n",
       "         -0.06799807],\n",
       "        [ 0.41104853, -1.0425413 , -0.50365365,  0.35652322, -0.08133615,\n",
       "          0.43022445,  0.13185152,  0.27439132, -0.4376375 ,  0.11299831,\n",
       "          0.29802543],\n",
       "        [-0.22365358, -0.48935154,  0.60860723,  0.10151621,  0.4457012 ,\n",
       "         -0.05987564,  0.44445828,  0.5513015 , -0.4016791 , -1.199688  ,\n",
       "         -0.04600119],\n",
       "        [ 0.5795013 , -0.11685194, -0.20706755,  0.1907684 , -0.3787724 ,\n",
       "         -0.60782975,  0.6134592 , -0.1023628 , -0.41981655,  0.7111496 ,\n",
       "         -0.02409586],\n",
       "        [ 0.4385276 ,  0.17351185,  0.15354323,  0.14983957,  0.19258164,\n",
       "          0.57141817,  0.27744806, -0.78251565, -0.32567963,  0.41374066,\n",
       "          0.2840995 ],\n",
       "        [-0.31106564,  1.0949755 , -0.24622513,  0.07203986,  0.05030028,\n",
       "          0.32162255, -0.33700034, -0.80397916, -0.2813279 , -0.7707037 ,\n",
       "         -0.42461634],\n",
       "        [-0.27780318, -0.730549  , -0.48135418,  0.02343522, -0.41550907,\n",
       "          0.89601403, -0.46819702, -0.08679677, -0.56837165, -0.05096504,\n",
       "         -0.52297217],\n",
       "        [ 0.05412524, -0.44871196,  0.33509967,  0.43232343,  0.5467793 ,\n",
       "          0.4032299 , -0.6759095 ,  0.2019987 ,  0.20369306, -0.75419146,\n",
       "         -0.7748087 ],\n",
       "        [ 0.51878405,  0.632787  ,  0.27447054,  0.09523362,  0.1882145 ,\n",
       "          0.2902277 , -0.03495271,  0.06233474, -0.4413543 ,  0.08748337,\n",
       "          0.20764285]], dtype=float32),\n",
       " array([ 0.28775492, -0.09113068,  0.6803234 , -0.09675088,  0.7179857 ,\n",
       "         0.07464825,  0.27510843,  0.13538286, -0.12146355, -0.16245167,\n",
       "         0.7120913 ], dtype=float32)]"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model2.layers[1].get_weights()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "6e1ab7f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-29T15:11:05.054080Z",
     "iopub.status.busy": "2024-06-29T15:11:05.053192Z",
     "iopub.status.idle": "2024-06-29T15:11:05.062463Z",
     "shell.execute_reply": "2024-06-29T15:11:05.061362Z"
    },
    "papermill": {
     "duration": 0.082517,
     "end_time": "2024-06-29T15:11:05.064925",
     "exception": false,
     "start_time": "2024-06-29T15:11:04.982408",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[array([[-0.86983764],\n",
       "        [ 1.3085865 ],\n",
       "        [-0.9858801 ],\n",
       "        [ 1.4146551 ],\n",
       "        [-0.86539286],\n",
       "        [ 0.5972666 ],\n",
       "        [-0.47490337],\n",
       "        [ 0.7387743 ],\n",
       "        [ 0.3140961 ],\n",
       "        [-0.8319386 ],\n",
       "        [-0.7372869 ]], dtype=float32),\n",
       " array([0.02395853], dtype=float32)]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model2.layers[2].get_weights()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "6f034d3e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-29T15:11:05.205632Z",
     "iopub.status.busy": "2024-06-29T15:11:05.204668Z",
     "iopub.status.idle": "2024-06-29T15:11:05.436450Z",
     "shell.execute_reply": "2024-06-29T15:11:05.435313Z"
    },
    "papermill": {
     "duration": 0.304723,
     "end_time": "2024-06-29T15:11:05.439038",
     "exception": false,
     "start_time": "2024-06-29T15:11:05.134315",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step\n"
     ]
    }
   ],
   "source": [
    "y2_log = model2.predict(X_test_scaled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "c3adf202",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-29T15:11:05.580656Z",
     "iopub.status.busy": "2024-06-29T15:11:05.580274Z",
     "iopub.status.idle": "2024-06-29T15:11:05.585844Z",
     "shell.execute_reply": "2024-06-29T15:11:05.584693Z"
    },
    "papermill": {
     "duration": 0.079052,
     "end_time": "2024-06-29T15:11:05.588026",
     "exception": false,
     "start_time": "2024-06-29T15:11:05.508974",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y2_pred = np.where(y2_log>0.5,1,0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "1b3562f3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-29T15:11:05.729876Z",
     "iopub.status.busy": "2024-06-29T15:11:05.729433Z",
     "iopub.status.idle": "2024-06-29T15:11:05.738782Z",
     "shell.execute_reply": "2024-06-29T15:11:05.737713Z"
    },
    "papermill": {
     "duration": 0.082761,
     "end_time": "2024-06-29T15:11:05.741123",
     "exception": false,
     "start_time": "2024-06-29T15:11:05.658362",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8575"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score\n",
    "accuracy_score(y_test,y2_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "f5a3a28e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-29T15:11:05.881900Z",
     "iopub.status.busy": "2024-06-29T15:11:05.881495Z",
     "iopub.status.idle": "2024-06-29T15:11:05.886436Z",
     "shell.execute_reply": "2024-06-29T15:11:05.885333Z"
    },
    "papermill": {
     "duration": 0.079244,
     "end_time": "2024-06-29T15:11:05.888970",
     "exception": false,
     "start_time": "2024-06-29T15:11:05.809726",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#We should plot the graph of any stage to get idea about the performance of the neural network."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "a6c6555d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-29T15:11:06.030844Z",
     "iopub.status.busy": "2024-06-29T15:11:06.030438Z",
     "iopub.status.idle": "2024-06-29T15:11:06.035395Z",
     "shell.execute_reply": "2024-06-29T15:11:06.034217Z"
    },
    "papermill": {
     "duration": 0.078183,
     "end_time": "2024-06-29T15:11:06.037732",
     "exception": false,
     "start_time": "2024-06-29T15:11:05.959549",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "19b3fdde",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-29T15:11:06.178944Z",
     "iopub.status.busy": "2024-06-29T15:11:06.178485Z",
     "iopub.status.idle": "2024-06-29T15:11:06.189812Z",
     "shell.execute_reply": "2024-06-29T15:11:06.188722Z"
    },
    "papermill": {
     "duration": 0.084292,
     "end_time": "2024-06-29T15:11:06.192338",
     "exception": false,
     "start_time": "2024-06-29T15:11:06.108046",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'accuracy': [0.7710937261581421,\n",
       "  0.7985937595367432,\n",
       "  0.8109375238418579,\n",
       "  0.8201562762260437,\n",
       "  0.8290625214576721,\n",
       "  0.839062511920929,\n",
       "  0.8453124761581421,\n",
       "  0.8514062762260437,\n",
       "  0.8539062738418579,\n",
       "  0.858593761920929,\n",
       "  0.8604687452316284,\n",
       "  0.8610937595367432,\n",
       "  0.8603125214576721,\n",
       "  0.8600000143051147,\n",
       "  0.8606250286102295,\n",
       "  0.860156238079071,\n",
       "  0.8604687452316284,\n",
       "  0.8607812523841858,\n",
       "  0.8590624928474426,\n",
       "  0.8595312237739563,\n",
       "  0.8617187738418579,\n",
       "  0.8620312213897705,\n",
       "  0.8626562356948853,\n",
       "  0.86328125,\n",
       "  0.8614062666893005,\n",
       "  0.8645312786102295,\n",
       "  0.8634374737739563,\n",
       "  0.8618749976158142,\n",
       "  0.8618749976158142,\n",
       "  0.8653125166893005,\n",
       "  0.864062488079071,\n",
       "  0.8635937571525574,\n",
       "  0.8621875047683716,\n",
       "  0.8645312786102295,\n",
       "  0.8634374737739563,\n",
       "  0.8631250262260437,\n",
       "  0.8635937571525574,\n",
       "  0.8659374713897705,\n",
       "  0.864062488079071,\n",
       "  0.8667187690734863,\n",
       "  0.8662499785423279,\n",
       "  0.8659374713897705,\n",
       "  0.8662499785423279,\n",
       "  0.8675000071525574,\n",
       "  0.8673437237739563,\n",
       "  0.8667187690734863,\n",
       "  0.8676562309265137,\n",
       "  0.8673437237739563,\n",
       "  0.8650000095367432,\n",
       "  0.8689062595367432,\n",
       "  0.8662499785423279,\n",
       "  0.8685937523841858,\n",
       "  0.8681250214576721,\n",
       "  0.8692187666893005,\n",
       "  0.8690624833106995,\n",
       "  0.8665624856948853,\n",
       "  0.867968738079071,\n",
       "  0.8693749904632568,\n",
       "  0.8689062595367432,\n",
       "  0.8681250214576721,\n",
       "  0.8690624833106995,\n",
       "  0.8682812452316284,\n",
       "  0.8689062595367432,\n",
       "  0.8704687356948853,\n",
       "  0.8700000047683716,\n",
       "  0.8709375262260437,\n",
       "  0.8700000047683716,\n",
       "  0.8706250190734863,\n",
       "  0.8693749904632568,\n",
       "  0.8701562285423279,\n",
       "  0.8721874952316284,\n",
       "  0.8687499761581421,\n",
       "  0.8707812428474426,\n",
       "  0.8696874976158142,\n",
       "  0.8698437213897705,\n",
       "  0.87109375,\n",
       "  0.8723437786102295,\n",
       "  0.87109375,\n",
       "  0.8706250190734863,\n",
       "  0.8715624809265137,\n",
       "  0.87109375,\n",
       "  0.8698437213897705,\n",
       "  0.8709375262260437,\n",
       "  0.8706250190734863,\n",
       "  0.8700000047683716,\n",
       "  0.8706250190734863,\n",
       "  0.8720312714576721,\n",
       "  0.8720312714576721,\n",
       "  0.8701562285423279,\n",
       "  0.8714062571525574,\n",
       "  0.870312511920929,\n",
       "  0.8709375262260437,\n",
       "  0.8725000023841858,\n",
       "  0.8704687356948853,\n",
       "  0.8714062571525574,\n",
       "  0.8728125095367432,\n",
       "  0.8720312714576721,\n",
       "  0.8721874952316284,\n",
       "  0.8739062547683716,\n",
       "  0.8707812428474426],\n",
       " 'loss': [0.5631256699562073,\n",
       "  0.4722782373428345,\n",
       "  0.437134712934494,\n",
       "  0.4179759621620178,\n",
       "  0.40352022647857666,\n",
       "  0.39058688282966614,\n",
       "  0.3788115382194519,\n",
       "  0.3677494525909424,\n",
       "  0.358713299036026,\n",
       "  0.3529433012008667,\n",
       "  0.34927794337272644,\n",
       "  0.34657490253448486,\n",
       "  0.3449193835258484,\n",
       "  0.3433229923248291,\n",
       "  0.34221938252449036,\n",
       "  0.3407905101776123,\n",
       "  0.3396998643875122,\n",
       "  0.3388209939002991,\n",
       "  0.33849474787712097,\n",
       "  0.3375011384487152,\n",
       "  0.3367842733860016,\n",
       "  0.33593136072158813,\n",
       "  0.33541953563690186,\n",
       "  0.334433913230896,\n",
       "  0.3342035710811615,\n",
       "  0.3327024579048157,\n",
       "  0.33258292078971863,\n",
       "  0.3321414291858673,\n",
       "  0.3319314122200012,\n",
       "  0.33038654923439026,\n",
       "  0.33068642020225525,\n",
       "  0.32928770780563354,\n",
       "  0.32971569895744324,\n",
       "  0.32888785004615784,\n",
       "  0.32825183868408203,\n",
       "  0.32792216539382935,\n",
       "  0.3272980749607086,\n",
       "  0.32654666900634766,\n",
       "  0.32696664333343506,\n",
       "  0.32582777738571167,\n",
       "  0.3254530429840088,\n",
       "  0.32512179017066956,\n",
       "  0.32485783100128174,\n",
       "  0.3248002529144287,\n",
       "  0.32410046458244324,\n",
       "  0.3238213062286377,\n",
       "  0.32325416803359985,\n",
       "  0.3228762447834015,\n",
       "  0.32281073927879333,\n",
       "  0.3222421407699585,\n",
       "  0.3227754831314087,\n",
       "  0.32157009840011597,\n",
       "  0.3214389681816101,\n",
       "  0.3219446539878845,\n",
       "  0.3209630846977234,\n",
       "  0.3213280439376831,\n",
       "  0.32051146030426025,\n",
       "  0.31989362835884094,\n",
       "  0.3199206590652466,\n",
       "  0.31958433985710144,\n",
       "  0.3195631802082062,\n",
       "  0.3197907507419586,\n",
       "  0.31950730085372925,\n",
       "  0.3191007673740387,\n",
       "  0.3185255825519562,\n",
       "  0.3185029923915863,\n",
       "  0.31831884384155273,\n",
       "  0.3178737759590149,\n",
       "  0.31798937916755676,\n",
       "  0.31779736280441284,\n",
       "  0.317599892616272,\n",
       "  0.3174414336681366,\n",
       "  0.3173392415046692,\n",
       "  0.3173106908798218,\n",
       "  0.31731364130973816,\n",
       "  0.3166573941707611,\n",
       "  0.3166934549808502,\n",
       "  0.3165383040904999,\n",
       "  0.3166225552558899,\n",
       "  0.3160642385482788,\n",
       "  0.3159577250480652,\n",
       "  0.31568604707717896,\n",
       "  0.31620660424232483,\n",
       "  0.3155859708786011,\n",
       "  0.3158547580242157,\n",
       "  0.31488949060440063,\n",
       "  0.31538063287734985,\n",
       "  0.31528332829475403,\n",
       "  0.31510716676712036,\n",
       "  0.31479981541633606,\n",
       "  0.31431883573532104,\n",
       "  0.3144543170928955,\n",
       "  0.314389705657959,\n",
       "  0.31413787603378296,\n",
       "  0.3141638934612274,\n",
       "  0.313841849565506,\n",
       "  0.31340330839157104,\n",
       "  0.314505010843277,\n",
       "  0.31343308091163635,\n",
       "  0.31327006220817566],\n",
       " 'val_accuracy': [0.7987499833106995,\n",
       "  0.8168749809265137,\n",
       "  0.8218749761581421,\n",
       "  0.828125,\n",
       "  0.8381249904632568,\n",
       "  0.8399999737739563,\n",
       "  0.8481249809265137,\n",
       "  0.8525000214576721,\n",
       "  0.8543750047683716,\n",
       "  0.8537499904632568,\n",
       "  0.8543750047683716,\n",
       "  0.8556249737739563,\n",
       "  0.8568750023841858,\n",
       "  0.8575000166893005,\n",
       "  0.859375,\n",
       "  0.8568750023841858,\n",
       "  0.859375,\n",
       "  0.8618749976158142,\n",
       "  0.8587499856948853,\n",
       "  0.8606250286102295,\n",
       "  0.8581249713897705,\n",
       "  0.8581249713897705,\n",
       "  0.8556249737739563,\n",
       "  0.8568750023841858,\n",
       "  0.8575000166893005,\n",
       "  0.8575000166893005,\n",
       "  0.8606250286102295,\n",
       "  0.859375,\n",
       "  0.8550000190734863,\n",
       "  0.8581249713897705,\n",
       "  0.856249988079071,\n",
       "  0.8537499904632568,\n",
       "  0.856249988079071,\n",
       "  0.8543750047683716,\n",
       "  0.8600000143051147,\n",
       "  0.8568750023841858,\n",
       "  0.8556249737739563,\n",
       "  0.8556249737739563,\n",
       "  0.8581249713897705,\n",
       "  0.8543750047683716,\n",
       "  0.8587499856948853,\n",
       "  0.8531249761581421,\n",
       "  0.8556249737739563,\n",
       "  0.8568750023841858,\n",
       "  0.8550000190734863,\n",
       "  0.856249988079071,\n",
       "  0.8537499904632568,\n",
       "  0.8537499904632568,\n",
       "  0.8543750047683716,\n",
       "  0.856249988079071,\n",
       "  0.8568750023841858,\n",
       "  0.8531249761581421,\n",
       "  0.8525000214576721,\n",
       "  0.8531249761581421,\n",
       "  0.8525000214576721,\n",
       "  0.8518750071525574,\n",
       "  0.8556249737739563,\n",
       "  0.8531249761581421,\n",
       "  0.8537499904632568,\n",
       "  0.8556249737739563,\n",
       "  0.8550000190734863,\n",
       "  0.8537499904632568,\n",
       "  0.8525000214576721,\n",
       "  0.8537499904632568,\n",
       "  0.8512499928474426,\n",
       "  0.8537499904632568,\n",
       "  0.8518750071525574,\n",
       "  0.8518750071525574,\n",
       "  0.8537499904632568,\n",
       "  0.856249988079071,\n",
       "  0.8531249761581421,\n",
       "  0.8518750071525574,\n",
       "  0.8537499904632568,\n",
       "  0.8543750047683716,\n",
       "  0.8531249761581421,\n",
       "  0.8512499928474426,\n",
       "  0.8512499928474426,\n",
       "  0.8512499928474426,\n",
       "  0.8512499928474426,\n",
       "  0.8506249785423279,\n",
       "  0.8525000214576721,\n",
       "  0.8537499904632568,\n",
       "  0.8525000214576721,\n",
       "  0.8512499928474426,\n",
       "  0.8487499952316284,\n",
       "  0.8518750071525574,\n",
       "  0.8512499928474426,\n",
       "  0.8531249761581421,\n",
       "  0.8550000190734863,\n",
       "  0.8512499928474426,\n",
       "  0.8531249761581421,\n",
       "  0.8543750047683716,\n",
       "  0.8525000214576721,\n",
       "  0.8525000214576721,\n",
       "  0.8512499928474426,\n",
       "  0.8518750071525574,\n",
       "  0.8500000238418579,\n",
       "  0.8506249785423279,\n",
       "  0.8531249761581421,\n",
       "  0.8518750071525574],\n",
       " 'val_loss': [0.4909282326698303,\n",
       "  0.4403949975967407,\n",
       "  0.42045098543167114,\n",
       "  0.408005028963089,\n",
       "  0.39704611897468567,\n",
       "  0.3874591886997223,\n",
       "  0.3766671121120453,\n",
       "  0.36904311180114746,\n",
       "  0.3632974624633789,\n",
       "  0.35959044098854065,\n",
       "  0.356904536485672,\n",
       "  0.3537326157093048,\n",
       "  0.3518437445163727,\n",
       "  0.3521854281425476,\n",
       "  0.34995850920677185,\n",
       "  0.3485901355743408,\n",
       "  0.3485054075717926,\n",
       "  0.3476586639881134,\n",
       "  0.35205721855163574,\n",
       "  0.34638872742652893,\n",
       "  0.3450430631637573,\n",
       "  0.34502530097961426,\n",
       "  0.34454914927482605,\n",
       "  0.3439033031463623,\n",
       "  0.34317025542259216,\n",
       "  0.3443220853805542,\n",
       "  0.3459014594554901,\n",
       "  0.3418847918510437,\n",
       "  0.3419770300388336,\n",
       "  0.3422836363315582,\n",
       "  0.3430570363998413,\n",
       "  0.3419383764266968,\n",
       "  0.3418819308280945,\n",
       "  0.34250515699386597,\n",
       "  0.3406343460083008,\n",
       "  0.3411518335342407,\n",
       "  0.3408065438270569,\n",
       "  0.34122714400291443,\n",
       "  0.34161701798439026,\n",
       "  0.34107494354248047,\n",
       "  0.3406684100627899,\n",
       "  0.341024249792099,\n",
       "  0.3416581451892853,\n",
       "  0.34082114696502686,\n",
       "  0.34098759293556213,\n",
       "  0.34231650829315186,\n",
       "  0.34328529238700867,\n",
       "  0.34144383668899536,\n",
       "  0.3413814306259155,\n",
       "  0.34203484654426575,\n",
       "  0.34132134914398193,\n",
       "  0.34304696321487427,\n",
       "  0.3438654839992523,\n",
       "  0.3426206111907959,\n",
       "  0.34265267848968506,\n",
       "  0.34257960319519043,\n",
       "  0.3418687880039215,\n",
       "  0.34249797463417053,\n",
       "  0.34210503101348877,\n",
       "  0.3425264358520508,\n",
       "  0.3445986807346344,\n",
       "  0.3426261842250824,\n",
       "  0.3426210880279541,\n",
       "  0.3416670560836792,\n",
       "  0.343729704618454,\n",
       "  0.34285998344421387,\n",
       "  0.34282615780830383,\n",
       "  0.3441123068332672,\n",
       "  0.34270229935646057,\n",
       "  0.34402889013290405,\n",
       "  0.34430035948753357,\n",
       "  0.3442715108394623,\n",
       "  0.3443261384963989,\n",
       "  0.3431850075721741,\n",
       "  0.34608906507492065,\n",
       "  0.34341439604759216,\n",
       "  0.3453541696071625,\n",
       "  0.34453773498535156,\n",
       "  0.34391117095947266,\n",
       "  0.3449133038520813,\n",
       "  0.3446138799190521,\n",
       "  0.34531766176223755,\n",
       "  0.3449016213417053,\n",
       "  0.34484928846359253,\n",
       "  0.34498339891433716,\n",
       "  0.3450254499912262,\n",
       "  0.3449023365974426,\n",
       "  0.3448389172554016,\n",
       "  0.3452610373497009,\n",
       "  0.34541815519332886,\n",
       "  0.34564340114593506,\n",
       "  0.345763236284256,\n",
       "  0.3453829288482666,\n",
       "  0.3470776677131653,\n",
       "  0.3454306423664093,\n",
       "  0.34564104676246643,\n",
       "  0.3462875485420227,\n",
       "  0.3456383943557739,\n",
       "  0.3460663855075836,\n",
       "  0.3471202552318573]}"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "history.history\n",
    "#We get a dictionary of the accuracy,loss,validation_accuracy.validation_loss of all the epochs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "c2d30553",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-29T15:11:06.333290Z",
     "iopub.status.busy": "2024-06-29T15:11:06.332881Z",
     "iopub.status.idle": "2024-06-29T15:11:06.553414Z",
     "shell.execute_reply": "2024-06-29T15:11:06.552315Z"
    },
    "papermill": {
     "duration": 0.293682,
     "end_time": "2024-06-29T15:11:06.555775",
     "exception": false,
     "start_time": "2024-06-29T15:11:06.262093",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7e5fc8c41ff0>]"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.history['loss'])\n",
    "plt.plot(history.history['val_loss'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "c109d5e6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-29T15:11:06.698684Z",
     "iopub.status.busy": "2024-06-29T15:11:06.697673Z",
     "iopub.status.idle": "2024-06-29T15:11:06.702565Z",
     "shell.execute_reply": "2024-06-29T15:11:06.701369Z"
    },
    "papermill": {
     "duration": 0.078833,
     "end_time": "2024-06-29T15:11:06.704863",
     "exception": false,
     "start_time": "2024-06-29T15:11:06.626030",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#from the above graph, we get the idea of overfitting.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "47281e06",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-29T15:11:06.847554Z",
     "iopub.status.busy": "2024-06-29T15:11:06.847157Z",
     "iopub.status.idle": "2024-06-29T15:11:07.041300Z",
     "shell.execute_reply": "2024-06-29T15:11:07.040029Z"
    },
    "papermill": {
     "duration": 0.268278,
     "end_time": "2024-06-29T15:11:07.043658",
     "exception": false,
     "start_time": "2024-06-29T15:11:06.775380",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7e5fc8ce7520>]"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.history['accuracy'])\n",
    "plt.plot(history.history['val_accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "f74df7e4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-29T15:11:07.187232Z",
     "iopub.status.busy": "2024-06-29T15:11:07.186797Z",
     "iopub.status.idle": "2024-06-29T15:11:07.192007Z",
     "shell.execute_reply": "2024-06-29T15:11:07.190703Z"
    },
    "papermill": {
     "duration": 0.079342,
     "end_time": "2024-06-29T15:11:07.194458",
     "exception": false,
     "start_time": "2024-06-29T15:11:07.115116",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#As we can see the gap betweent the plot, we can say some sort of overfitting is there."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "38fc925f",
   "metadata": {
    "papermill": {
     "duration": 0.07028,
     "end_time": "2024-06-29T15:11:07.336609",
     "exception": false,
     "start_time": "2024-06-29T15:11:07.266329",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 13831,
     "sourceId": 18644,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 66.754393,
   "end_time": "2024-06-29T15:11:09.033147",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-06-29T15:10:02.278754",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
